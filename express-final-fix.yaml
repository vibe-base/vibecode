apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-express
  namespace: vibecode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: simple-express
  template:
    metadata:
      labels:
        app: simple-express
    spec:
      containers:
      - name: express
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create a directory for the Express server
          mkdir -p /app
          cd /app
          
          # Create package.json
          echo '{
            "name": "vibecode-express",
            "version": "1.0.0",
            "description": "Express server for GitHub OAuth callback",
            "main": "index.js",
            "dependencies": {
              "express": "^4.18.2",
              "axios": "^1.6.7",
              "cors": "^2.8.5"
            }
          }' > package.json
          
          # Create index.js
          echo 'const express = require("express");
          const axios = require("axios");
          const cors = require("cors");
          const app = express();
          const port = process.env.PORT || 5000;

          // Enable CORS for all routes with detailed logging
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST", "OPTIONS"],
            allowedHeaders: ["Origin", "X-Requested-With", "Content-Type", "Accept", "Authorization"],
            credentials: true
          }));

          console.log("Starting Express server with GitHub OAuth support...");

          // Simple route
          app.get("/", (req, res) => {
            res.send("Express server is running");
          });

          // Health check endpoint
          app.get("/health", (req, res) => {
            res.status(200).send("OK");
          });

          // GitHub exchange route - path expected by frontend
          app.get("/api/auth/github/exchange", async (req, res) => {
            const code = req.query.code;
            
            console.log(`GitHub exchange request received with code: ${code}`);
            console.log(`Full URL: ${req.protocol}://${req.get("host")}${req.originalUrl}`);
            console.log(`Headers: ${JSON.stringify(req.headers)}`);
            
            if (!code) {
              console.error("No code parameter provided");
              return res.status(400).json({ error: "Code parameter is required" });
            }
            
            try {
              // Exchange code for access token with GitHub
              console.log("Exchanging code for access token with GitHub");
              console.log(`GitHub Client ID: ${process.env.GITHUB_CLIENT_ID}`);
              console.log(`GitHub Client Secret: ${process.env.GITHUB_CLIENT_SECRET ? "Set (hidden)" : "Not set"}`);
              
              // Create a mock response for testing
              console.log("Creating mock response for testing");
              
              // Return mock user data and token
              return res.json({
                access_token: "mock_access_token",
                token_type: "bearer",
                user: {
                  username: "mock_user",
                  email: "mock_user@example.com",
                  full_name: "Mock User",
                  avatar_url: "https://example.com/avatar.png"
                }
              });
              
            } catch (error) {
              console.error("Error processing GitHub exchange:", error.message);
              if (error.response) {
                console.error("Response data:", error.response.data);
                console.error("Response status:", error.response.status);
                console.error("Response headers:", error.response.headers);
              }
              return res.status(500).json({ 
                error: "Failed to authenticate with GitHub",
                details: error.message
              });
            }
          });

          // Start the server
          app.listen(port, "0.0.0.0", () => {
            console.log(`Server running on port ${port}`);
            console.log(`GitHub Client ID: ${process.env.GITHUB_CLIENT_ID || "Not set"}`);
            console.log(`GitHub Client Secret: ${process.env.GITHUB_CLIENT_SECRET ? "Set (hidden)" : "Not set"}`);
            console.log(`GitHub Redirect URI: ${process.env.GITHUB_REDIRECT_URI || "Not set"}`);
          });

          // Keep the process alive
          setInterval(() => {
            console.log("Express server is still running...");
          }, 60000);' > index.js
          
          # Install dependencies
          npm install
          
          # Start the Express server
          node index.js
        ports:
        - containerPort: 5000
        env:
        - name: GITHUB_CLIENT_ID
          value: "Iv23liWkm8qUlFlLAXKe"
        - name: GITHUB_CLIENT_SECRET
          value: "your_github_client_secret"
        - name: GITHUB_REDIRECT_URI
          value: "https://vibecode.gigahard.ai/github-callback"
