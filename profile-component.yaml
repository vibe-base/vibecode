apiVersion: apps/v1
kind: Deployment
metadata:
  name: profile-component
  namespace: vibecode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: profile-component
  template:
    metadata:
      labels:
        app: profile-component
    spec:
      containers:
      - name: node
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create a directory for the profile component
          mkdir -p /app
          cd /app
          
          # Create package.json
          cat > package.json << 'EOF'
          {
            "name": "profile-component",
            "version": "1.0.0",
            "description": "Profile component with logout button",
            "main": "index.js",
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5"
            }
          }
          EOF
          
          # Create index.js
          cat > index.js << 'EOF'
          const express = require("express");
          const cors = require("cors");
          const app = express();
          const port = process.env.PORT || 3000;

          // Enable CORS for all routes
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST", "OPTIONS"],
            allowedHeaders: ["Origin", "X-Requested-With", "Content-Type", "Accept", "Authorization"],
            credentials: true
          }));

          console.log("Starting profile component server...");

          // Serve the profile component
          app.get("/profile-component.js", (req, res) => {
            console.log("Profile component requested");
            
            // Return a JavaScript file that injects the profile component into the DOM
            const js = `
            (function() {
              // Create the profile component
              function createProfileComponent() {
                // Get the user data from localStorage
                const userDataStr = localStorage.getItem('user');
                let username = 'User';
                let avatarUrl = 'https://github.com/identicons/mock_user.png';
                
                try {
                  if (userDataStr) {
                    const userData = JSON.parse(userDataStr);
                    username = userData.login || 'User';
                  }
                } catch (err) {
                  console.error('Error parsing user data:', err);
                }
                
                // Create the container
                const container = document.createElement('div');
                container.className = 'absolute top-2 right-4 z-50';
                container.style.zIndex = '9999';
                
                // Create the dropdown
                const dropdown = document.createElement('div');
                dropdown.className = 'relative inline-block text-left';
                
                // Create the button
                const button = document.createElement('button');
                button.className = 'flex items-center space-x-2 rounded-full bg-opacity-20 bg-black p-1 hover:bg-opacity-30 focus:outline-none';
                button.id = 'profile-menu-button';
                button.setAttribute('aria-expanded', 'false');
                button.setAttribute('aria-haspopup', 'true');
                
                // Create the avatar
                const avatar = document.createElement('img');
                avatar.src = avatarUrl;
                avatar.className = 'h-8 w-8 rounded-full';
                avatar.alt = username;
                
                // Add the avatar to the button
                button.appendChild(avatar);
                
                // Create the dropdown menu
                const dropdownMenu = document.createElement('div');
                dropdownMenu.className = 'absolute right-0 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden';
                dropdownMenu.id = 'profile-menu';
                dropdownMenu.setAttribute('role', 'menu');
                dropdownMenu.setAttribute('aria-orientation', 'vertical');
                dropdownMenu.setAttribute('aria-labelledby', 'profile-menu-button');
                dropdownMenu.setAttribute('tabindex', '-1');
                
                // Create the dropdown menu items
                const menuItems = document.createElement('div');
                menuItems.className = 'py-1';
                menuItems.setAttribute('role', 'none');
                
                // Create the user info item
                const userInfo = document.createElement('div');
                userInfo.className = 'px-4 py-2 text-sm text-gray-700 border-b border-gray-200';
                userInfo.textContent = 'Signed in as ' + username;
                
                // Create the logout item
                const logoutItem = document.createElement('a');
                logoutItem.href = '#';
                logoutItem.className = 'block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100';
                logoutItem.setAttribute('role', 'menuitem');
                logoutItem.setAttribute('tabindex', '-1');
                logoutItem.textContent = 'Sign out';
                logoutItem.onclick = function(e) {
                  e.preventDefault();
                  // Clear localStorage
                  localStorage.clear();
                  // Redirect to login page
                  window.location.href = '/login';
                };
                
                // Add the menu items to the dropdown menu
                menuItems.appendChild(userInfo);
                menuItems.appendChild(logoutItem);
                dropdownMenu.appendChild(menuItems);
                
                // Add the button and dropdown menu to the dropdown
                dropdown.appendChild(button);
                dropdown.appendChild(dropdownMenu);
                
                // Add the dropdown to the container
                container.appendChild(dropdown);
                
                // Add event listener to toggle the dropdown menu
                button.addEventListener('click', function() {
                  const expanded = this.getAttribute('aria-expanded') === 'true';
                  this.setAttribute('aria-expanded', !expanded);
                  dropdownMenu.classList.toggle('hidden');
                });
                
                // Add event listener to close the dropdown menu when clicking outside
                document.addEventListener('click', function(event) {
                  if (!container.contains(event.target)) {
                    button.setAttribute('aria-expanded', 'false');
                    dropdownMenu.classList.add('hidden');
                  }
                });
                
                return container;
              }
              
              // Wait for the DOM to be fully loaded
              function injectProfileComponent() {
                // Check if the user is authenticated
                const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
                if (!isLoggedIn) {
                  return;
                }
                
                // Check if we're on the main page (not login or callback)
                if (window.location.pathname === '/login' || window.location.pathname === '/github-callback') {
                  return;
                }
                
                // Create the profile component
                const profileComponent = createProfileComponent();
                
                // Inject the profile component into the DOM
                document.body.appendChild(profileComponent);
                
                console.log('Profile component injected');
              }
              
              // Try to inject immediately if the DOM is already loaded
              if (document.readyState === 'complete' || document.readyState === 'interactive') {
                setTimeout(injectProfileComponent, 1000);
              } else {
                // Otherwise wait for the DOM to be loaded
                document.addEventListener('DOMContentLoaded', function() {
                  setTimeout(injectProfileComponent, 1000);
                });
              }
              
              // Also try after a delay to ensure the app is fully rendered
              setTimeout(injectProfileComponent, 2000);
            })();
            `;
            
            res.setHeader('Content-Type', 'application/javascript');
            res.send(js);
          });

          // Start the server
          app.listen(port, "0.0.0.0", () => {
            console.log(`Profile component server running on port ${port}`);
          });
          EOF
          
          # Install dependencies
          npm install
          
          # Start the server
          node index.js
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: profile-component
  namespace: vibecode
spec:
  selector:
    app: profile-component
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: profile-component-ingress
  namespace: vibecode
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
    traefik.ingress.kubernetes.io/router.priority: "7000"
spec:
  ingressClassName: traefik
  rules:
  - host: vibecode.gigahard.ai
    http:
      paths:
      - path: /profile-component.js
        pathType: Exact
        backend:
          service:
            name: profile-component
            port:
              number: 80
  tls:
  - hosts:
    - vibecode.gigahard.ai
