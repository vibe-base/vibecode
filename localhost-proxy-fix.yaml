apiVersion: apps/v1
kind: Deployment
metadata:
  name: localhost-proxy-fix
  namespace: vibecode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: localhost-proxy-fix
  template:
    metadata:
      labels:
        app: localhost-proxy-fix
    spec:
      containers:
      - name: node
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create a directory for the proxy server
          mkdir -p /app
          cd /app
          
          # Create package.json
          echo '{
            "name": "localhost-proxy",
            "version": "1.0.0",
            "description": "Proxy server for localhost:8000",
            "main": "index.js",
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5",
              "http-proxy-middleware": "^2.0.6"
            }
          }' > package.json
          
          # Create index.js
          echo 'const express = require("express");
          const cors = require("cors");
          const { createProxyMiddleware } = require("http-proxy-middleware");
          const app = express();
          const port = process.env.PORT || 8000;

          // Enable CORS for all routes
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST", "OPTIONS"],
            allowedHeaders: ["Origin", "X-Requested-With", "Content-Type", "Accept", "Authorization"],
            credentials: true
          }));

          console.log("Starting localhost proxy server...");

          // Proxy requests to /api/auth/github/exchange to the Express server
          app.use("/api/auth/github/exchange", createProxyMiddleware({
            target: "http://simple-express-service:5000",
            changeOrigin: true,
            onProxyReq: (proxyReq, req, res) => {
              console.log(`Proxying request to: ${req.url}`);
            },
            onProxyRes: (proxyRes, req, res) => {
              console.log(`Received response from target: ${proxyRes.statusCode}`);
              
              // Log the response body
              let responseBody = "";
              const originalWrite = res.write;
              const originalEnd = res.end;
              
              res.write = function(chunk) {
                responseBody += chunk.toString("utf8");
                return originalWrite.apply(res, arguments);
              };
              
              res.end = function(chunk) {
                if (chunk) {
                  responseBody += chunk.toString("utf8");
                }
                console.log(`Response body: ${responseBody}`);
                return originalEnd.apply(res, arguments);
              };
            }
          }));

          // Handle all other requests
          app.all("*", (req, res) => {
            console.log(`Received request: ${req.method} ${req.url}`);
            res.status(404).send("Not found");
          });

          // Start the server
          app.listen(port, "0.0.0.0", () => {
            console.log(`Localhost proxy server running on port ${port}`);
          });' > index.js
          
          # Install dependencies
          npm install
          
          # Start the proxy server
          node index.js
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: localhost-proxy-fix
  namespace: vibecode
spec:
  selector:
    app: localhost-proxy-fix
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: localhost-proxy-fix-ingress
  namespace: vibecode
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.priority: "300"
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - localhost
  rules:
  - host: localhost
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: localhost-proxy-fix
            port:
              number: 8000
