apiVersion: apps/v1
kind: Deployment
metadata:
  name: localhost-proxy-debug
  namespace: vibecode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: localhost-proxy-debug
  template:
    metadata:
      labels:
        app: localhost-proxy-debug
    spec:
      containers:
      - name: node
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create a directory for the proxy server
          mkdir -p /app
          cd /app
          
          # Create package.json
          echo '{
            "name": "localhost-proxy",
            "version": "1.0.0",
            "description": "Proxy server for localhost:8000",
            "main": "index.js",
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5"
            }
          }' > package.json
          
          # Create index.js
          echo 'const express = require("express");
          const cors = require("cors");
          const app = express();
          const port = process.env.PORT || 8000;

          // Enable CORS for all routes
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST", "OPTIONS"],
            allowedHeaders: ["Origin", "X-Requested-With", "Content-Type", "Accept", "Authorization"],
            credentials: true
          }));

          console.log("Starting localhost proxy server...");

          // Handle GitHub OAuth exchange
          app.get("/api/auth/github/exchange", (req, res) => {
            const code = req.query.code;
            console.log(`Received GitHub OAuth exchange request with code: ${code}`);
            
            // Return a mock response
            const mockResponse = {
              access_token: "mock_access_token",
              token_type: "bearer",
              user: {
                username: "mock_user",
                email: "mock_user@example.com",
                full_name: "Mock User",
                avatar_url: "https://example.com/avatar.png"
              }
            };
            
            console.log(`Returning mock response: ${JSON.stringify(mockResponse)}`);
            
            // Set CORS headers explicitly
            res.header("Access-Control-Allow-Origin", "*");
            res.header("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
            res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");
            
            res.json(mockResponse);
          });

          // Start the server
          app.listen(port, "0.0.0.0", () => {
            console.log(`Localhost proxy server running on port ${port}`);
          });' > index.js
          
          # Install dependencies
          npm install
          
          # Start the proxy server
          node index.js
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: localhost-proxy-debug
  namespace: vibecode
spec:
  selector:
    app: localhost-proxy-debug
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: localhost-proxy-debug-ingress
  namespace: vibecode
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
    traefik.ingress.kubernetes.io/router.priority: "3000"
spec:
  ingressClassName: traefik
  rules:
  - host: vibecode.gigahard.ai
    http:
      paths:
      - path: /api/auth/github/exchange
        pathType: Exact
        backend:
          service:
            name: localhost-proxy-debug
            port:
              number: 8000
  tls:
  - hosts:
    - vibecode.gigahard.ai
