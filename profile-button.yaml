apiVersion: apps/v1
kind: Deployment
metadata:
  name: profile-button
  namespace: vibecode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: profile-button
  template:
    metadata:
      labels:
        app: profile-button
    spec:
      containers:
      - name: node
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create a directory for the profile button
          mkdir -p /app
          cd /app
          
          # Create package.json
          cat > package.json << 'EOF'
          {
            "name": "profile-button",
            "version": "1.0.0",
            "description": "Profile button with logout functionality",
            "main": "index.js",
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5"
            }
          }
          EOF
          
          # Create index.js
          cat > index.js << 'EOF'
          const express = require("express");
          const cors = require("cors");
          const app = express();
          const port = process.env.PORT || 3000;

          // Enable CORS for all routes
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST", "OPTIONS"],
            allowedHeaders: ["Origin", "X-Requested-With", "Content-Type", "Accept", "Authorization"],
            credentials: true
          }));

          console.log("Starting profile button server...");

          // Serve the profile button HTML
          app.get("/profile-button", (req, res) => {
            console.log("Profile button requested");
            
            const html = `
            <!DOCTYPE html>
            <html>
            <head>
              <title>Profile Button</title>
              <style>
                body {
                  margin: 0;
                  padding: 0;
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                }
                
                .profile-container {
                  position: fixed;
                  top: 10px;
                  right: 10px;
                  z-index: 9999;
                }
                
                .profile-button {
                  display: flex;
                  align-items: center;
                  background-color: rgba(0, 0, 0, 0.2);
                  border-radius: 9999px;
                  padding: 4px;
                  cursor: pointer;
                  border: none;
                  outline: none;
                }
                
                .profile-button:hover {
                  background-color: rgba(0, 0, 0, 0.3);
                }
                
                .profile-avatar {
                  width: 32px;
                  height: 32px;
                  border-radius: 9999px;
                }
                
                .profile-dropdown {
                  position: absolute;
                  right: 0;
                  top: 100%;
                  margin-top: 8px;
                  width: 224px;
                  background-color: white;
                  border-radius: 6px;
                  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                  overflow: hidden;
                  display: none;
                }
                
                .profile-dropdown.show {
                  display: block;
                }
                
                .profile-info {
                  padding: 8px 16px;
                  font-size: 14px;
                  color: #374151;
                  border-bottom: 1px solid #e5e7eb;
                }
                
                .profile-menu-item {
                  display: block;
                  padding: 8px 16px;
                  font-size: 14px;
                  color: #374151;
                  text-decoration: none;
                }
                
                .profile-menu-item:hover {
                  background-color: #f3f4f6;
                }
                
                /* Dark mode styles */
                .theme-dark .profile-dropdown {
                  background-color: #1e1e1e;
                  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.5), 0 2px 4px -1px rgba(0, 0, 0, 0.3);
                }
                
                .theme-dark .profile-info {
                  color: #d4d4d4;
                  border-bottom: 1px solid #333333;
                }
                
                .theme-dark .profile-menu-item {
                  color: #d4d4d4;
                }
                
                .theme-dark .profile-menu-item:hover {
                  background-color: #2d2d2d;
                }
                
                /* Terminal theme styles */
                .theme-terminal .profile-dropdown {
                  background-color: #000000;
                  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.5), 0 2px 4px -1px rgba(0, 0, 0, 0.3);
                  border: 1px solid #00ff00;
                }
                
                .theme-terminal .profile-info {
                  color: #00ff00;
                  border-bottom: 1px solid #00ff00;
                }
                
                .theme-terminal .profile-menu-item {
                  color: #00ff00;
                }
                
                .theme-terminal .profile-menu-item:hover {
                  background-color: #001100;
                }
              </style>
            </head>
            <body>
              <div class="profile-container">
                <button class="profile-button" id="profile-button">
                  <img class="profile-avatar" src="https://github.com/identicons/mock_user.png" alt="User Avatar">
                </button>
                <div class="profile-dropdown" id="profile-dropdown">
                  <div class="profile-info" id="profile-info">
                    Signed in as mock_user
                  </div>
                  <a href="#" class="profile-menu-item" id="logout-button">Sign out</a>
                </div>
              </div>
              
              <script>
                // Get the user data from localStorage
                function getUserData() {
                  try {
                    const userDataStr = localStorage.getItem('user');
                    if (userDataStr) {
                      return JSON.parse(userDataStr);
                    }
                  } catch (err) {
                    console.error('Error parsing user data:', err);
                  }
                  return { login: 'mock_user' };
                }
                
                // Update the profile info with the user data
                function updateProfileInfo() {
                  const userData = getUserData();
                  const profileInfo = document.getElementById('profile-info');
                  if (profileInfo) {
                    profileInfo.textContent = 'Signed in as ' + (userData.login || 'mock_user');
                  }
                }
                
                // Toggle the profile dropdown
                function toggleProfileDropdown() {
                  const dropdown = document.getElementById('profile-dropdown');
                  if (dropdown) {
                    dropdown.classList.toggle('show');
                  }
                }
                
                // Close the profile dropdown when clicking outside
                function closeProfileDropdown(event) {
                  const container = document.querySelector('.profile-container');
                  const dropdown = document.getElementById('profile-dropdown');
                  if (container && dropdown && !container.contains(event.target)) {
                    dropdown.classList.remove('show');
                  }
                }
                
                // Logout function
                function logout() {
                  // Clear localStorage
                  localStorage.clear();
                  // Redirect to login page
                  window.parent.location.href = '/login';
                }
                
                // Add event listeners
                document.addEventListener('DOMContentLoaded', function() {
                  // Update the profile info
                  updateProfileInfo();
                  
                  // Add event listener to the profile button
                  const profileButton = document.getElementById('profile-button');
                  if (profileButton) {
                    profileButton.addEventListener('click', toggleProfileDropdown);
                  }
                  
                  // Add event listener to the logout button
                  const logoutButton = document.getElementById('logout-button');
                  if (logoutButton) {
                    logoutButton.addEventListener('click', function(event) {
                      event.preventDefault();
                      logout();
                    });
                  }
                  
                  // Add event listener to close the dropdown when clicking outside
                  document.addEventListener('click', closeProfileDropdown);
                });
                
                // Apply theme class to body
                function applyTheme() {
                  try {
                    const theme = localStorage.getItem('theme_mode') || 'dark';
                    document.body.classList.add('theme-' + theme);
                  } catch (err) {
                    console.error('Error getting theme:', err);
                    document.body.classList.add('theme-dark');
                  }
                }
                
                // Apply theme on load
                applyTheme();
              </script>
            </body>
            </html>
            `;
            
            res.setHeader('Content-Type', 'text/html');
            res.send(html);
          });

          // Start the server
          app.listen(port, "0.0.0.0", () => {
            console.log(`Profile button server running on port ${port}`);
          });
          EOF
          
          # Install dependencies
          npm install
          
          # Start the server
          node index.js
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: profile-button
  namespace: vibecode
spec:
  selector:
    app: profile-button
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: profile-button-ingress
  namespace: vibecode
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
    traefik.ingress.kubernetes.io/router.priority: "7000"
spec:
  ingressClassName: traefik
  rules:
  - host: vibecode.gigahard.ai
    http:
      paths:
      - path: /profile-button
        pathType: Exact
        backend:
          service:
            name: profile-button
            port:
              number: 80
  tls:
  - hosts:
    - vibecode.gigahard.ai
