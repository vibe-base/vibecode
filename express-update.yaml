apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-express
  namespace: vibecode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: simple-express
  template:
    metadata:
      labels:
        app: simple-express
    spec:
      containers:
      - name: express
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create a directory for the Express server
          mkdir -p /app
          cd /app
          
          # Create package.json
          echo '{
            "name": "vibecode-express",
            "version": "1.0.0",
            "description": "Simple Express server for GitHub OAuth callback",
            "main": "index.js",
            "dependencies": {
              "express": "^4.18.2",
              "axios": "^1.6.7",
              "cors": "^2.8.5"
            }
          }' > package.json
          
          # Create index.js
          echo 'const express = require("express");
          const axios = require("axios");
          const cors = require("cors");
          const app = express();
          const port = process.env.PORT || 5000;

          // Enable CORS for all routes
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST"],
            allowedHeaders: ["Content-Type", "Authorization"]
          }));

          console.log("Starting Express server with GitHub OAuth support...");

          // Simple route
          app.get("/", (req, res) => {
            res.send("Express server is running");
          });

          // Health check endpoint
          app.get("/health", (req, res) => {
            res.status(200).send("OK");
          });

          // GitHub callback route - original path
          app.get("/api/express/auth/github/callback", (req, res) => {
            const code = req.query.code || "no-code";
            console.log(`GitHub callback received at /api/express/auth/github/callback with code: ${code}`);
            
            res.json({ 
              message: "GitHub callback received",
              code: code,
              timestamp: new Date().toISOString()
            });
          });

          // GitHub exchange route - path expected by frontend
          app.get("/api/auth/github/exchange", async (req, res) => {
            const code = req.query.code;
            
            if (!code) {
              return res.status(400).json({ error: "Code parameter is required" });
            }
            
            console.log(`GitHub exchange request received with code: ${code}`);
            
            try {
              // Exchange code for access token with GitHub
              const tokenResponse = await axios.post(
                "https://github.com/login/oauth/access_token",
                {
                  client_id: process.env.GITHUB_CLIENT_ID,
                  client_secret: process.env.GITHUB_CLIENT_SECRET,
                  code: code
                },
                {
                  headers: {
                    Accept: "application/json"
                  }
                }
              );
              
              const data = tokenResponse.data;
              
              if (data.error) {
                console.error(`GitHub error: ${data.error}`);
                return res.status(400).json({ error: `GitHub error: ${data.error}` });
              }
              
              if (!data.access_token) {
                console.error("No access token received from GitHub");
                return res.status(400).json({ error: "No access token received from GitHub" });
              }
              
              console.log("Successfully obtained GitHub access token");
              
              // Get user data from GitHub
              const userResponse = await axios.get("https://api.github.com/user", {
                headers: {
                  Authorization: `token ${data.access_token}`
                }
              });
              
              const githubUser = userResponse.data;
              
              // Get user email
              const emailsResponse = await axios.get("https://api.github.com/user/emails", {
                headers: {
                  Authorization: `token ${data.access_token}`
                }
              });
              
              const emails = emailsResponse.data;
              const primaryEmail = emails.find(email => email.primary);
              
              if (!primaryEmail) {
                console.error("No primary email found for GitHub user");
                return res.status(400).json({ error: "No primary email found for GitHub user" });
              }
              
              // Create user object
              const user = {
                username: githubUser.login,
                email: primaryEmail.email,
                full_name: githubUser.name || "",
                github_id: githubUser.id.toString(),
                avatar_url: githubUser.avatar_url
              };
              
              console.log(`User data: ${JSON.stringify(user)}`);
              
              // Create a simple JWT token (in a real app, use a proper JWT library)
              const token = Buffer.from(JSON.stringify({ 
                sub: user.username,
                exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hour expiration
              })).toString("base64");
              
              // Return user data and token
              return res.json({
                access_token: token,
                token_type: "bearer",
                user: {
                  username: user.username,
                  email: user.email,
                  full_name: user.full_name,
                  avatar_url: user.avatar_url
                }
              });
              
            } catch (error) {
              console.error("Error processing GitHub exchange:", error.message);
              return res.status(500).json({ 
                error: "Failed to authenticate with GitHub",
                details: error.message
              });
            }
          });

          // Start the server
          app.listen(port, "0.0.0.0", () => {
            console.log(`Server running on port ${port}`);
            console.log(`GitHub Client ID: ${process.env.GITHUB_CLIENT_ID || "Not set"}`);
            console.log(`GitHub Client Secret: ${process.env.GITHUB_CLIENT_SECRET ? "Set (hidden)" : "Not set"}`);
            console.log(`GitHub Redirect URI: ${process.env.GITHUB_REDIRECT_URI || "Not set"}`);
          });

          // Keep the process alive
          setInterval(() => {
            console.log("Express server is still running...");
          }, 60000);' > index.js
          
          # Install dependencies
          npm install
          
          # Start the Express server
          node index.js
        ports:
        - containerPort: 5000
        env:
        - name: GITHUB_CLIENT_ID
          value: "Iv23liWkm8qUlFlLAXKe"
        - name: GITHUB_CLIENT_SECRET
          value: "your_github_client_secret"
        - name: GITHUB_REDIRECT_URI
          value: "https://vibecode.gigahard.ai/github-callback"
