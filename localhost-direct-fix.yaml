apiVersion: apps/v1
kind: Deployment
metadata:
  name: localhost-direct-fix
  namespace: vibecode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: localhost-direct-fix
  template:
    metadata:
      labels:
        app: localhost-direct-fix
    spec:
      containers:
      - name: node
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create a directory for the proxy server
          mkdir -p /app
          cd /app
          
          # Create package.json
          echo '{
            "name": "localhost-direct-fix",
            "version": "1.0.0",
            "description": "Localhost direct fix",
            "main": "index.js",
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5",
              "http-proxy-middleware": "^2.0.6"
            }
          }' > package.json
          
          # Create index.js
          echo 'const express = require("express");
          const cors = require("cors");
          const { createProxyMiddleware } = require("http-proxy-middleware");
          const app = express();
          const port = process.env.PORT || 8000;

          // Enable CORS for all routes
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST", "OPTIONS"],
            allowedHeaders: ["Origin", "X-Requested-With", "Content-Type", "Accept", "Authorization"],
            credentials: true
          }));

          console.log("Starting localhost direct fix server...");

          // Proxy requests to /api/auth/github/exchange to the Express server
          app.use("/api/auth/github/exchange", (req, res) => {
            console.log(`Received request to /api/auth/github/exchange with code: ${req.query.code}`);
            
            // Return a mock response
            res.json({
              access_token: "mock_access_token",
              token_type: "bearer",
              user: {
                username: "mock_user",
                email: "mock_user@example.com",
                full_name: "Mock User",
                avatar_url: "https://example.com/avatar.png"
              }
            });
          });

          // Handle all other requests
          app.all("*", (req, res) => {
            console.log(`Received request: ${req.method} ${req.url}`);
            res.status(404).send("Not found");
          });

          // Start the server
          app.listen(port, "0.0.0.0", () => {
            console.log(`Localhost direct fix server running on port ${port}`);
          });' > index.js
          
          # Install dependencies
          npm install
          
          # Start the proxy server
          node index.js
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: localhost-direct-fix
  namespace: vibecode
spec:
  selector:
    app: localhost-direct-fix
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: localhost-direct-fix-ingress
  namespace: vibecode
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.priority: "1000"
    kubernetes.io/ingress.class: traefik
spec:
  ingressClassName: traefik
  rules:
  - host: localhost
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: localhost-direct-fix
            port:
              number: 8000
