apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-nginx-config
  namespace: vibecode
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
            
            # Add JavaScript to override the fetch function
            sub_filter '</head>' '<script src="/fetch-override.js"></script></head>';
            sub_filter_once on;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-nginx
  namespace: vibecode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-nginx
  template:
    metadata:
      labels:
        app: frontend-nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: fetch-override
          mountPath: /usr/share/nginx/html/fetch-override.js
          subPath: fetch-override.js
        - name: frontend-content
          mountPath: /usr/share/nginx/html
      - name: frontend-content
        image: gigahard/vibecode-client:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Copy the frontend content to the shared volume
          cp -r /usr/share/nginx/html/* /content/
          
          # Keep the container running
          sleep infinity
        volumeMounts:
        - name: frontend-content
          mountPath: /content
      volumes:
      - name: nginx-config
        configMap:
          name: frontend-nginx-config
      - name: fetch-override
        configMap:
          name: fetch-override
      - name: frontend-content
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-nginx
  namespace: vibecode
spec:
  selector:
    app: frontend-nginx
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-nginx-ingress
  namespace: vibecode
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - vibecode.gigahard.ai
  rules:
  - host: vibecode.gigahard.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-nginx
            port:
              number: 80
